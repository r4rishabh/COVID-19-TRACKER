{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","MapContainer","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","class","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bee13f1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./InfoBox.css\";\nimport { Card, CardContent, Typography} from \"@material-ui/core\";\nfunction InfoBox({title, cases, active, isRed, total, ...props}) {\n    return (\n        <Card onClick={props.onClick} className={`infobox ${active && \"infobox--selected\"} ${isRed && \"infobox--red\"}`}>\n            <CardContent>\n                <Typography className=\"infobox__title\"color=\"textSecondary\">{title}</Typography>\n                <h2 className={`infobox__cases ${!isRed && \"infobox__cases--green\"}`}>{cases}</h2>\n                <Typography className=\"infobox__total\" color=\"textSecondary\">{total} total</Typography>\n            </CardContent>\n            \n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#CC1034\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#7dd71d\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      multiplier: 2000,\n    },\n  };\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    sortedData.sort((a,b) =>{\n        if(a.cases>b.cases){\n            return -1;\n        }else{\n            return 1;\n        }\n    })\n    return sortedData;\n};\n\nexport const prettyPrintStat = (stat) => \n   stat ? `+${numeral(stat).format(\"0,0\")}` :\"+0\";\n\n// Draw circles on the map with interactive tootop\n\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country=> (\n      <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius = {\n          Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      >\n       <Popup>\n       <div className=\"info-container\">\n        <div\n        className=\"info-flag\"\n          style={{ backgroundImage: `url(${country.countryInfo.flag})`}}\n        />\n        <div className=\"info-name\">{country.country}</div>\n        <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n        <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n        <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n      </div>  \n      </Popup>   \n\n\n\n      </Circle>\n    ))\n);","import React from 'react';\nimport \"./Map.css\";\nimport { MapContainer,  TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\n\nfunction Map({ countries, casesType, center,zoom}) {\n    return (\n        <div className=\"map\">\n        <MapContainer center={center} zoom={zoom}>\n         <TileLayer\n         url = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n         attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n         \n         />   \n         {showDataOnMap(countries, casesType)} \n        </MapContainer>           \n        </div>\n    );\n}\n\nexport default Map;\n","import React from 'react'\nimport numeral from \"numeral\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td>\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\n                   </td>\n                </tr>\n            ))}\n        </div>\n    );\n}\n\nexport default Table;\n","import React, {useState, useEffect} from 'react'\nimport {Line} from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n  \n  const buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n  \n  function LineGraph({ casesType = \"cases\", ...props }) {\n    const [data, setData] = useState({});\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n          .then((response) => {\n            return response.json();\n          })\n          .then((data) => {\n            let chartData = buildChartData(data, casesType);\n            setData(chartData);\n            console.log(chartData);\n            // buildChart(chartData);\n          });\n      };\n  \n      fetchData();\n    }, [casesType]);\n    \n    return (\n        <div className={props.className}>\n            \n            {data?.length > 0 && (\n            \n            <Line \n            options = {options}\n            data = {{\n                datasets: [{\n                    backgroundColor : \"rgba(204, 16, 52, 0.5)\",\n                    borderColor: \"#CC1034\",\n                    data: data,\n                },\n            ],\n            }}\n            options\n            \n            />\n\n            )}\n            \n        </div>\n    );\n}\n\nexport default LineGraph\n","import React, { useState, useEffect} from \"react\";\nimport {MenuItem,FormControl,Select, Card,CardContent} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng:-40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState([\"cases\"]);\n\n  // STATE = how to write a variable in REACT\n  // USEEFFECT = runs a piece of code in given condition\n\n  useEffect(() => {\n \n  fetch(\"https://disease.sh/v3/covid-19/all\")\n  .then(response => response.json())\n  .then(data => {\n    setCountryInfo(data);\n  })\n\n\n  }, [])\n\n  useEffect(() => {\n\n    // The code inside here will run once\n    // when the component loads and not again\n    // ASYNC = send a request wait for it then do something with info\n\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n\n    getCountriesData();\n\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    console.log(\"RDs>>>>\", countryCode);\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all'\n     : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n     await fetch(url)\n     .then(response => response.json())\n     .then(data =>{\n       setCountry(countryCode);\n       setCountryInfo(data);\n       setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n       setMapZoom(4);\n     });\n\n  };\n\n  console.log(\"Country info\", countryInfo);\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n      <h1>COVID 19 TRACKER</h1>\n        <FormControl className=\"app__dropdown\">\n          <Select variant = \"outlined\" onChange={onCountryChange} value={country}>\n            {/* Loop through all the countries and show a drop down list */}\n            <MenuItem value=\"worldwide\">worldwide</MenuItem>\n            {countries.map((country) => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            )\n            )}  \n          </Select>\n        </FormControl>\n      </div>\n      <div class=\"app__stats\">\n        <InfoBox\n        isRed \n        active={casesType === \"cases\"}\n        onClick={(e) => setCasesType(\"cases\")}\n        title=\"Coronavirus Cases\" \n        cases={prettyPrintStat(countryInfo.todayCases)} \n        total={prettyPrintStat(countryInfo.cases)}\n        />\n\n        <InfoBox\n        active={casesType === \"recovered\"}\n        onClick={(e) => setCasesType(\"recovered\")}\n        title=\"Recovered\" \n        cases={prettyPrintStat(countryInfo.todayRecovered)} \n        total={prettyPrintStat(countryInfo.recovered)}\n        />\n\n        <InfoBox\n        isRed \n        active={casesType === \"deaths\"}\n        onClick={(e) => setCasesType(\"deaths\")}\n        title=\"Deaths\" \n        cases={prettyPrintStat(countryInfo.todayDeaths)} \n        total={prettyPrintStat(countryInfo.deaths)}\n        />\n      </div>\n      <Map \n      casesType = {casesType}\n      countries = {mapCountries}\n      center = {mapCenter}\n      zoom = {mapZoom}\n      \n      />\n\n   </div>\n\n   <Card className=\"app__right\">\n   <CardContent>\n     <h3>Live Cases By Country</h3>\n     <Table countries={tableData}/>\n     <h3 className=\"app__graphTitle\">World Wide {casesType}</h3>\n\n     <LineGraph className=\"app__graph\" casesType={casesType}/>\n \n    \n\n   </CardContent>\n\n   </Card>\n\n </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}